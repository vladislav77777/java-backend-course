app:
  scheduler:
    enable: true
    interval: 10s
    force-check-delay: 10s
    link-last-check-interval: 30s

  client:
    gitHub: "https://api.github.com"
    stackOverflow: "https://api.stackexchange.com/2.3"
    bot: ${BOT_URL:http://localhost:8090}

  debug-information:
    api-error-response-stack-trace-list-length: 5
  database-access-type: jpa

  retry:
    max-attempts: 3
    retry-status-codes: 500, 502, 503, 504
    type: linear
    delay-config:
      constant:
        back-off-period-millis: 1000
      linear:
        initial-interval-millis: 1000
        max-interval-millis: 5000
      exponential:
        initial-interval-millis: 1000
        multiplier: 2
        max-interval-millis: 100000

  kafka-config-info:
    bootstrap-servers: 127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094
    updates-topic:
      name: scrapper.updates
      partitions: 2
      replicas: 2
  use-queue: true

spring:
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  application:
    name: scrapper
  datasource:
    hikari:
      maximum-pool-size: 50
      minimum-idle: 20
    url: ${DB_URL:jdbc:postgresql://localhost:5432/scrapper}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:changeme}
  liquibase:
    enabled: false
  cache:
    jcache:
      provider: com.github.benmanes.caffeine.jcache.spi.CaffeineCachingProvider
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=60s
    cache-names:
      - rate-limit-buckets-scrapper

bucket4j:
  enabled: true
  filters:
    - cache-name: rate-limit-buckets-scrapper
      url: /.*
      http-response-body: "{ \"status\": 429, \"error\": \"Too Many Requests\", \"message\": \"You have exhausted your API Request Quota\" }"
      rate-limits:
        - bandwidths:
            - capacity: 100
              time: 1
              unit: minutes
              refill-speed: interval
server:
  port: 8080

management:
  info:
    env:
      enabled: true
  server:
    port: 8081
  endpoints:
    web:
      base-path: /
      exposure:
        include: health,info,prometheus
      path-mapping:
        prometheus: metrics
  metrics:
    tags:
      application: ${spring.application.name}

info:
  name: "Link Tracker"
  description: "App for tracking links in GitHub and StackOverflow via Telegram bot"
  author: "Vladislav Grigorev"
  app:
    encoding: "UTF-8"
    java:
      source: "21"
      target: "21"


logging:
  config: classpath:log4j2-plain.xml
  level:
    org.springframework.jdbc.core: DEBUG

# http://localhost:8080/swagger-ui/index.html
